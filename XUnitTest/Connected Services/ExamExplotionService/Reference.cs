//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamExplotionService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class GameManagement : object
    {
        
        private int GameIdField;
        
        private string GameStatusField;
        
        private int HostPlayerIdField;
        
        private string InvitationCodeField;
        
        private int LivesField;
        
        private int NumberPlayersField;
        
        private int TimePerTurnField;
        
        private int WinnerPlayerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId
        {
            get
            {
                return this.GameIdField;
            }
            set
            {
                this.GameIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameStatus
        {
            get
            {
                return this.GameStatusField;
            }
            set
            {
                this.GameStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HostPlayerId
        {
            get
            {
                return this.HostPlayerIdField;
            }
            set
            {
                this.HostPlayerIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvitationCode
        {
            get
            {
                return this.InvitationCodeField;
            }
            set
            {
                this.InvitationCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Lives
        {
            get
            {
                return this.LivesField;
            }
            set
            {
                this.LivesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberPlayers
        {
            get
            {
                return this.NumberPlayersField;
            }
            set
            {
                this.NumberPlayersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimePerTurn
        {
            get
            {
                return this.TimePerTurnField;
            }
            set
            {
                this.TimePerTurnField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerPlayerId
        {
            get
            {
                return this.WinnerPlayerIdField;
            }
            set
            {
                this.WinnerPlayerIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class AccountManagement : object
    {
        
        private string EmailField;
        
        private string GamertagField;
        
        private string LastnameField;
        
        private string NameField;
        
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gamertag
        {
            get
            {
                return this.GamertagField;
            }
            set
            {
                this.GamertagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname
        {
            get
            {
                return this.LastnameField;
            }
            set
            {
                this.LastnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class CardManagement : object
    {
        
        private string CardNameField;
        
        private string CardPathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardName
        {
            get
            {
                return this.CardNameField;
            }
            set
            {
                this.CardNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardPath
        {
            get
            {
                return this.CardPathField;
            }
            set
            {
                this.CardPathField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class PlayerManagement : object
    {
        
        private int AccountIdField;
        
        private int ScoreField;
        
        private int UserIdField;
        
        private int WinsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId
        {
            get
            {
                return this.AccountIdField;
            }
            set
            {
                this.AccountIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Score
        {
            get
            {
                return this.ScoreField;
            }
            set
            {
                this.ScoreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Wins
        {
            get
            {
                return this.WinsField;
            }
            set
            {
                this.WinsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuestManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class GuestManagement : object
    {
        
        private int GuestNumberField;
        
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GuestNumber
        {
            get
            {
                return this.GuestNumberField;
            }
            set
            {
                this.GuestNumberField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId
        {
            get
            {
                return this.UserIdField;
            }
            set
            {
                this.UserIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PurchasedAccessoryManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class PurchasedAccessoryManagement : object
    {
        
        private int AccesoryIdField;
        
        private bool InUseField;
        
        private int PlayerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccesoryId
        {
            get
            {
                return this.AccesoryIdField;
            }
            set
            {
                this.AccesoryIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InUse
        {
            get
            {
                return this.InUseField;
            }
            set
            {
                this.InUseField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId
        {
            get
            {
                return this.PlayerIdField;
            }
            set
            {
                this.PlayerIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessoryManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class AccessoryManagement : object
    {
        
        private int AccessoryIdField;
        
        private string AccessoryNameField;
        
        private string PathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccessoryId
        {
            get
            {
                return this.AccessoryIdField;
            }
            set
            {
                this.AccessoryIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccessoryName
        {
            get
            {
                return this.AccessoryNameField;
            }
            set
            {
                this.AccessoryNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class FriendManagement : object
    {
        
        private int Player1IdField;
        
        private int Player2IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player1Id
        {
            get
            {
                return this.Player1IdField;
            }
            set
            {
                this.Player1IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player2Id
        {
            get
            {
                return this.Player2IdField;
            }
            set
            {
                this.Player2IdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BlockListManagement", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class BlockListManagement : object
    {
        
        private int BlockedPlayerIdField;
        
        private int PlayerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BlockedPlayerId
        {
            get
            {
                return this.BlockedPlayerIdField;
            }
            set
            {
                this.BlockedPlayerIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId
        {
            get
            {
                return this.PlayerIdField;
            }
            set
            {
                this.PlayerIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.ILobbyManager", CallbackContract=typeof(ExamExplotionService.ILobbyManagerCallback))]
    public interface ILobbyManager
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendMessage")]
        void SendMessage(string gameCode, string gamertag, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string gameCode, string gamertag, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/Connect")]
        void Connect(string user, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string user, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/Disconnect", ReplyAction="http://tempuri.org/ILobbyManager/DisconnectResponse")]
        void Disconnect(string lobbyCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/Disconnect", ReplyAction="http://tempuri.org/ILobbyManager/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string lobbyCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/CreateLobbyResponse")]
        string CreateLobby(ExamExplotionService.GameManagement gameReceived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/CreateLobbyResponse")]
        System.Threading.Tasks.Task<string> CreateLobbyAsync(ExamExplotionService.GameManagement gameReceived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/JoinLobby", ReplyAction="http://tempuri.org/ILobbyManager/JoinLobbyResponse")]
        bool JoinLobby(string code, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/JoinLobby", ReplyAction="http://tempuri.org/ILobbyManager/JoinLobbyResponse")]
        System.Threading.Tasks.Task<bool> JoinLobbyAsync(string code, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/UpdatePlayerStatus")]
        void UpdatePlayerStatus(string code, string gamertag, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/UpdatePlayerStatus")]
        System.Threading.Tasks.Task UpdatePlayerStatusAsync(string code, string gamertag, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyManager/LeaveLobbyResponse")]
        void LeaveLobby(string code, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyManager/LeaveLobbyResponse")]
        System.Threading.Tasks.Task LeaveLobbyAsync(string code, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/PlayGame")]
        void PlayGame(string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/PlayGame")]
        System.Threading.Tasks.Task PlayGameAsync(string lobbyCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ILobbyManagerCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ReceiveMessage")]
        void ReceiveMessage(string gamertag, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/Repaint")]
        void Repaint(System.Collections.Generic.Dictionary<string, bool> playerStatus);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/StartGame")]
        void StartGame(System.Collections.Generic.Dictionary<string, bool> lobbyPlayers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/UpdateHost")]
        void UpdateHost();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ILobbyManagerChannel : ExamExplotionService.ILobbyManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class LobbyManagerClientBase : System.ServiceModel.DuplexClientBase<ExamExplotionService.ILobbyManager>, ExamExplotionService.ILobbyManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, LobbyManagerClientBase.GetDefaultBinding(), LobbyManagerClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ILobbyManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), LobbyManagerClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public void SendMessage(string gameCode, string gamertag, string message)
        {
            base.Channel.SendMessage(gameCode, gamertag, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string gameCode, string gamertag, string message)
        {
            return base.Channel.SendMessageAsync(gameCode, gamertag, message);
        }
        
        public void Connect(string user, string lobbyCode)
        {
            base.Channel.Connect(user, lobbyCode);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string user, string lobbyCode)
        {
            return base.Channel.ConnectAsync(user, lobbyCode);
        }
        
        public void Disconnect(string lobbyCode, string gamertag)
        {
            base.Channel.Disconnect(lobbyCode, gamertag);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string lobbyCode, string gamertag)
        {
            return base.Channel.DisconnectAsync(lobbyCode, gamertag);
        }
        
        public string CreateLobby(ExamExplotionService.GameManagement gameReceived)
        {
            return base.Channel.CreateLobby(gameReceived);
        }
        
        public System.Threading.Tasks.Task<string> CreateLobbyAsync(ExamExplotionService.GameManagement gameReceived)
        {
            return base.Channel.CreateLobbyAsync(gameReceived);
        }
        
        public bool JoinLobby(string code, string gamertag)
        {
            return base.Channel.JoinLobby(code, gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> JoinLobbyAsync(string code, string gamertag)
        {
            return base.Channel.JoinLobbyAsync(code, gamertag);
        }
        
        public void UpdatePlayerStatus(string code, string gamertag, bool isReady)
        {
            base.Channel.UpdatePlayerStatus(code, gamertag, isReady);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerStatusAsync(string code, string gamertag, bool isReady)
        {
            return base.Channel.UpdatePlayerStatusAsync(code, gamertag, isReady);
        }
        
        public void LeaveLobby(string code, string gamertag)
        {
            base.Channel.LeaveLobby(code, gamertag);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(string code, string gamertag)
        {
            return base.Channel.LeaveLobbyAsync(code, gamertag);
        }
        
        public void PlayGame(string lobbyCode)
        {
            base.Channel.PlayGame(lobbyCode);
        }
        
        public System.Threading.Tasks.Task PlayGameAsync(string lobbyCode)
        {
            return base.Channel.PlayGameAsync(lobbyCode);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ILobbyManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ILobbyManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/LobbyManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return LobbyManagerClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ILobbyManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return LobbyManagerClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ILobbyManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ILobbyManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IAuthenticationManager")]
    public interface IAuthenticationManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Login", ReplyAction="http://tempuri.org/IAuthenticationManager/LoginResponse")]
        int Login(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Login", ReplyAction="http://tempuri.org/IAuthenticationManager/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertag", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertagResponse")]
        int VerifyExistingGamertag(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertag", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertagResponse")]
        System.Threading.Tasks.Task<int> VerifyExistingGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingEmail", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingEmailResponse")]
        int VerifyExistingEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingEmail", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingEmailResponse")]
        System.Threading.Tasks.Task<int> VerifyExistingEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/AddAccount", ReplyAction="http://tempuri.org/IAuthenticationManager/AddAccountResponse")]
        bool AddAccount(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/AddAccount", ReplyAction="http://tempuri.org/IAuthenticationManager/AddAccountResponse")]
        System.Threading.Tasks.Task<bool> AddAccountAsync(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/UpdatePassword", ReplyAction="http://tempuri.org/IAuthenticationManager/UpdatePasswordResponse")]
        bool UpdatePassword(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/UpdatePassword", ReplyAction="http://tempuri.org/IAuthenticationManager/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdatePasswordAsync(ExamExplotionService.AccountManagement account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/GetAccountIdByGamertag", ReplyAction="http://tempuri.org/IAuthenticationManager/GetAccountIdByGamertagResponse")]
        int GetAccountIdByGamertag(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/GetAccountIdByGamertag", ReplyAction="http://tempuri.org/IAuthenticationManager/GetAccountIdByGamertagResponse")]
        System.Threading.Tasks.Task<int> GetAccountIdByGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/DeactivateAccount", ReplyAction="http://tempuri.org/IAuthenticationManager/DeactivateAccountResponse")]
        bool DeactivateAccount(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/DeactivateAccount", ReplyAction="http://tempuri.org/IAuthenticationManager/DeactivateAccountResponse")]
        System.Threading.Tasks.Task<bool> DeactivateAccountAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/GetAccountGamertagById", ReplyAction="http://tempuri.org/IAuthenticationManager/GetAccountGamertagByIdResponse")]
        string GetAccountGamertagById(int accountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/GetAccountGamertagById", ReplyAction="http://tempuri.org/IAuthenticationManager/GetAccountGamertagByIdResponse")]
        System.Threading.Tasks.Task<string> GetAccountGamertagByIdAsync(int accountId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAuthenticationManagerChannel : ExamExplotionService.IAuthenticationManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AuthenticationManagerClient : System.ServiceModel.ClientBase<ExamExplotionService.IAuthenticationManager>, ExamExplotionService.IAuthenticationManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthenticationManagerClient() : 
                base(AuthenticationManagerClient.GetDefaultBinding(), AuthenticationManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IAuthenticationManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), AuthenticationManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public int Login(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.Login(account);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.LoginAsync(account);
        }
        
        public int VerifyExistingGamertag(string gamertag)
        {
            return base.Channel.VerifyExistingGamertag(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> VerifyExistingGamertagAsync(string gamertag)
        {
            return base.Channel.VerifyExistingGamertagAsync(gamertag);
        }
        
        public int VerifyExistingEmail(string email)
        {
            return base.Channel.VerifyExistingEmail(email);
        }
        
        public System.Threading.Tasks.Task<int> VerifyExistingEmailAsync(string email)
        {
            return base.Channel.VerifyExistingEmailAsync(email);
        }
        
        public bool AddAccount(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.AddAccount(account);
        }
        
        public System.Threading.Tasks.Task<bool> AddAccountAsync(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.AddAccountAsync(account);
        }
        
        public bool UpdatePassword(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.UpdatePassword(account);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePasswordAsync(ExamExplotionService.AccountManagement account)
        {
            return base.Channel.UpdatePasswordAsync(account);
        }
        
        public int GetAccountIdByGamertag(string gamertag)
        {
            return base.Channel.GetAccountIdByGamertag(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountIdByGamertagAsync(string gamertag)
        {
            return base.Channel.GetAccountIdByGamertagAsync(gamertag);
        }
        
        public bool DeactivateAccount(string gamertag)
        {
            return base.Channel.DeactivateAccount(gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> DeactivateAccountAsync(string gamertag)
        {
            return base.Channel.DeactivateAccountAsync(gamertag);
        }
        
        public string GetAccountGamertagById(int accountId)
        {
            return base.Channel.GetAccountGamertagById(accountId);
        }
        
        public System.Threading.Tasks.Task<string> GetAccountGamertagByIdAsync(int accountId)
        {
            return base.Channel.GetAccountGamertagByIdAsync(accountId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAuthenticationManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAuthenticationManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/AuthenticationManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuthenticationManagerClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IAuthenticationManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuthenticationManagerClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IAuthenticationManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IAuthenticationManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IGameManager", CallbackContract=typeof(ExamExplotionService.IGameManagerCallback))]
    public interface IGameManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ConnectGame", ReplyAction="http://tempuri.org/IGameManager/ConnectGameResponse")]
        bool ConnectGame(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ConnectGame", ReplyAction="http://tempuri.org/IGameManager/ConnectGameResponse")]
        System.Threading.Tasks.Task<bool> ConnectGameAsync(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeDeck")]
        void InitializeDeck(string gameCode, int playerCount, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeDeck")]
        System.Threading.Tasks.Task InitializeDeckAsync(string gameCode, int playerCount, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyEndTurn")]
        void NotifyEndTurn(string gameCode, string currentGamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyEndTurn")]
        System.Threading.Tasks.Task NotifyEndTurnAsync(string gameCode, string currentGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetCurrentTurn", ReplyAction="http://tempuri.org/IGameManager/GetCurrentTurnResponse")]
        string GetCurrentTurn(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetCurrentTurn", ReplyAction="http://tempuri.org/IGameManager/GetCurrentTurnResponse")]
        System.Threading.Tasks.Task<string> GetCurrentTurnAsync(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGame", ReplyAction="http://tempuri.org/IGameManager/GetGameResponse")]
        ExamExplotionService.GameManagement GetGame(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGame", ReplyAction="http://tempuri.org/IGameManager/GetGameResponse")]
        System.Threading.Tasks.Task<ExamExplotionService.GameManagement> GetGameAsync(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeGameTurns")]
        void InitializeGameTurns(string gameCode, string[] gamertags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/InitializeGameTurns")]
        System.Threading.Tasks.Task InitializeGameTurnsAsync(string gameCode, string[] gamertags);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyClientOfTurn")]
        void NotifyClientOfTurn(string gameCode, string nextGametag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyClientOfTurn")]
        System.Threading.Tasks.Task NotifyClientOfTurnAsync(string gameCode, string nextGametag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyDrawCard")]
        void NotifyDrawCard(string gameCode, string gamertag, bool isTopCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyDrawCard")]
        System.Threading.Tasks.Task NotifyDrawCardAsync(string gameCode, string gamertag, bool isTopCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyCardOnBoard")]
        void NotifyCardOnBoard(string gameCode, string path);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyCardOnBoard")]
        System.Threading.Tasks.Task NotifyCardOnBoardAsync(string gameCode, string path);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendShuffleDeck")]
        void SendShuffleDeck(string gameCode, System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendShuffleDeck")]
        System.Threading.Tasks.Task SendShuffleDeckAsync(string gameCode, System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestCard")]
        void RequestCard(string gameCode, string playerRequested, string playerRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RequestCard")]
        System.Threading.Tasks.Task RequestCardAsync(string gameCode, string playerRequested, string playerRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendCardToPlayer")]
        void SendCardToPlayer(string gameCode, string playerRequesting, ExamExplotionService.CardManagement cardToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendCardToPlayer")]
        System.Threading.Tasks.Task SendCardToPlayerAsync(string gameCode, string playerRequesting, ExamExplotionService.CardManagement cardToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyMessage")]
        void NotifyMessage(string gameCode, string gamertagOrigin, string gamertagDestination, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyMessage")]
        System.Threading.Tasks.Task NotifyMessageAsync(string gameCode, string gamertagOrigin, string gamertagDestination, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RemovePlayerByGame")]
        void RemovePlayerByGame(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RemovePlayerByGame")]
        System.Threading.Tasks.Task RemovePlayerByGameAsync(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendExamBomb")]
        void SendExamBomb(string gameCode, int gameDeckCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendExamBomb")]
        System.Threading.Tasks.Task SendExamBombAsync(string gameCode, int gameDeckCount);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendDoubleTurn")]
        void SendDoubleTurn(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SendDoubleTurn")]
        System.Threading.Tasks.Task SendDoubleTurnAsync(string gameCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/AddPlayersToGame")]
        void AddPlayersToGame(string[] playerGamertags, string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/AddPlayersToGame")]
        System.Threading.Tasks.Task AddPlayersToGameAsync(string[] playerGamertags, string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGamePlayers", ReplyAction="http://tempuri.org/IGameManager/GetGamePlayersResponse")]
        int[] GetGamePlayers(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGamePlayers", ReplyAction="http://tempuri.org/IGameManager/GetGamePlayersResponse")]
        System.Threading.Tasks.Task<int[]> GetGamePlayersAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetAccountsIdByPlayerId", ReplyAction="http://tempuri.org/IGameManager/GetAccountsIdByPlayerIdResponse")]
        int[] GetAccountsIdByPlayerId(int[] playersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetAccountsIdByPlayerId", ReplyAction="http://tempuri.org/IGameManager/GetAccountsIdByPlayerIdResponse")]
        System.Threading.Tasks.Task<int[]> GetAccountsIdByPlayerIdAsync(int[] playersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGameId", ReplyAction="http://tempuri.org/IGameManager/GetGameIdResponse")]
        int GetGameId(string gameCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGameId", ReplyAction="http://tempuri.org/IGameManager/GetGameIdResponse")]
        System.Threading.Tasks.Task<int> GetGameIdAsync(string gameCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IGameManagerCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/UpdateCurrentTurn")]
        void UpdateCurrentTurn(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/SyncTimer")]
        void SyncTimer();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RecivePlayerAndGameDeck")]
        void RecivePlayerAndGameDeck(System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck, ExamExplotionService.CardManagement[] playerDeck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/RemoveCardFromStack")]
        void RemoveCardFromStack(bool isTopCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/PrintCardOnBoard")]
        void PrintCardOnBoard(string path);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ReceiveGameDeck")]
        void ReceiveGameDeck(System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyCardRequested")]
        void NotifyCardRequested(string gameCode, string playerRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/NotifyCardReceived")]
        void NotifyCardReceived(ExamExplotionService.CardManagement card);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ReciveNotification")]
        void ReciveNotification(string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/EndTheGame")]
        void EndTheGame(string gameCode, string winnerGamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameManager/ReciveAndAddExamBomb")]
        void ReciveAndAddExamBomb(int index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IGameManagerChannel : ExamExplotionService.IGameManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class GameManagerClientBase : System.ServiceModel.DuplexClientBase<ExamExplotionService.IGameManager>, ExamExplotionService.IGameManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public GameManagerClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, GameManagerClientBase.GetDefaultBinding(), GameManagerClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IGameManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, GameManagerClientBase.GetBindingForEndpoint(endpointConfiguration), GameManagerClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, GameManagerClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, GameManagerClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public GameManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public bool ConnectGame(string gameCode, string gamertag)
        {
            return base.Channel.ConnectGame(gameCode, gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectGameAsync(string gameCode, string gamertag)
        {
            return base.Channel.ConnectGameAsync(gameCode, gamertag);
        }
        
        public void InitializeDeck(string gameCode, int playerCount, string gamertag)
        {
            base.Channel.InitializeDeck(gameCode, playerCount, gamertag);
        }
        
        public System.Threading.Tasks.Task InitializeDeckAsync(string gameCode, int playerCount, string gamertag)
        {
            return base.Channel.InitializeDeckAsync(gameCode, playerCount, gamertag);
        }
        
        public void NotifyEndTurn(string gameCode, string currentGamertag)
        {
            base.Channel.NotifyEndTurn(gameCode, currentGamertag);
        }
        
        public System.Threading.Tasks.Task NotifyEndTurnAsync(string gameCode, string currentGamertag)
        {
            return base.Channel.NotifyEndTurnAsync(gameCode, currentGamertag);
        }
        
        public string GetCurrentTurn(string gameCode)
        {
            return base.Channel.GetCurrentTurn(gameCode);
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentTurnAsync(string gameCode)
        {
            return base.Channel.GetCurrentTurnAsync(gameCode);
        }
        
        public ExamExplotionService.GameManagement GetGame(string gameCode)
        {
            return base.Channel.GetGame(gameCode);
        }
        
        public System.Threading.Tasks.Task<ExamExplotionService.GameManagement> GetGameAsync(string gameCode)
        {
            return base.Channel.GetGameAsync(gameCode);
        }
        
        public void InitializeGameTurns(string gameCode, string[] gamertags)
        {
            base.Channel.InitializeGameTurns(gameCode, gamertags);
        }
        
        public System.Threading.Tasks.Task InitializeGameTurnsAsync(string gameCode, string[] gamertags)
        {
            return base.Channel.InitializeGameTurnsAsync(gameCode, gamertags);
        }
        
        public void NotifyClientOfTurn(string gameCode, string nextGametag)
        {
            base.Channel.NotifyClientOfTurn(gameCode, nextGametag);
        }
        
        public System.Threading.Tasks.Task NotifyClientOfTurnAsync(string gameCode, string nextGametag)
        {
            return base.Channel.NotifyClientOfTurnAsync(gameCode, nextGametag);
        }
        
        public void NotifyDrawCard(string gameCode, string gamertag, bool isTopCard)
        {
            base.Channel.NotifyDrawCard(gameCode, gamertag, isTopCard);
        }
        
        public System.Threading.Tasks.Task NotifyDrawCardAsync(string gameCode, string gamertag, bool isTopCard)
        {
            return base.Channel.NotifyDrawCardAsync(gameCode, gamertag, isTopCard);
        }
        
        public void NotifyCardOnBoard(string gameCode, string path)
        {
            base.Channel.NotifyCardOnBoard(gameCode, path);
        }
        
        public System.Threading.Tasks.Task NotifyCardOnBoardAsync(string gameCode, string path)
        {
            return base.Channel.NotifyCardOnBoardAsync(gameCode, path);
        }
        
        public void SendShuffleDeck(string gameCode, System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck)
        {
            base.Channel.SendShuffleDeck(gameCode, gameDeck);
        }
        
        public System.Threading.Tasks.Task SendShuffleDeckAsync(string gameCode, System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck)
        {
            return base.Channel.SendShuffleDeckAsync(gameCode, gameDeck);
        }
        
        public void RequestCard(string gameCode, string playerRequested, string playerRequesting)
        {
            base.Channel.RequestCard(gameCode, playerRequested, playerRequesting);
        }
        
        public System.Threading.Tasks.Task RequestCardAsync(string gameCode, string playerRequested, string playerRequesting)
        {
            return base.Channel.RequestCardAsync(gameCode, playerRequested, playerRequesting);
        }
        
        public void SendCardToPlayer(string gameCode, string playerRequesting, ExamExplotionService.CardManagement cardToSend)
        {
            base.Channel.SendCardToPlayer(gameCode, playerRequesting, cardToSend);
        }
        
        public System.Threading.Tasks.Task SendCardToPlayerAsync(string gameCode, string playerRequesting, ExamExplotionService.CardManagement cardToSend)
        {
            return base.Channel.SendCardToPlayerAsync(gameCode, playerRequesting, cardToSend);
        }
        
        public void NotifyMessage(string gameCode, string gamertagOrigin, string gamertagDestination, string message)
        {
            base.Channel.NotifyMessage(gameCode, gamertagOrigin, gamertagDestination, message);
        }
        
        public System.Threading.Tasks.Task NotifyMessageAsync(string gameCode, string gamertagOrigin, string gamertagDestination, string message)
        {
            return base.Channel.NotifyMessageAsync(gameCode, gamertagOrigin, gamertagDestination, message);
        }
        
        public void RemovePlayerByGame(string gameCode, string gamertag)
        {
            base.Channel.RemovePlayerByGame(gameCode, gamertag);
        }
        
        public System.Threading.Tasks.Task RemovePlayerByGameAsync(string gameCode, string gamertag)
        {
            return base.Channel.RemovePlayerByGameAsync(gameCode, gamertag);
        }
        
        public void SendExamBomb(string gameCode, int gameDeckCount)
        {
            base.Channel.SendExamBomb(gameCode, gameDeckCount);
        }
        
        public System.Threading.Tasks.Task SendExamBombAsync(string gameCode, int gameDeckCount)
        {
            return base.Channel.SendExamBombAsync(gameCode, gameDeckCount);
        }
        
        public void SendDoubleTurn(string gameCode, string gamertag)
        {
            base.Channel.SendDoubleTurn(gameCode, gamertag);
        }
        
        public System.Threading.Tasks.Task SendDoubleTurnAsync(string gameCode, string gamertag)
        {
            return base.Channel.SendDoubleTurnAsync(gameCode, gamertag);
        }
        
        public void AddPlayersToGame(string[] playerGamertags, string gameCode)
        {
            base.Channel.AddPlayersToGame(playerGamertags, gameCode);
        }
        
        public System.Threading.Tasks.Task AddPlayersToGameAsync(string[] playerGamertags, string gameCode)
        {
            return base.Channel.AddPlayersToGameAsync(playerGamertags, gameCode);
        }
        
        public int[] GetGamePlayers(int gameId)
        {
            return base.Channel.GetGamePlayers(gameId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetGamePlayersAsync(int gameId)
        {
            return base.Channel.GetGamePlayersAsync(gameId);
        }
        
        public int[] GetAccountsIdByPlayerId(int[] playersId)
        {
            return base.Channel.GetAccountsIdByPlayerId(playersId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetAccountsIdByPlayerIdAsync(int[] playersId)
        {
            return base.Channel.GetAccountsIdByPlayerIdAsync(playersId);
        }
        
        public int GetGameId(string gameCode)
        {
            return base.Channel.GetGameId(gameCode);
        }
        
        public System.Threading.Tasks.Task<int> GetGameIdAsync(string gameCode)
        {
            return base.Channel.GetGameIdAsync(gameCode);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IGameManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IGameManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/GameManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return GameManagerClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IGameManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return GameManagerClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IGameManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IGameManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IPlayerManager")]
    public interface IPlayerManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerManager/RegisterPlayerResponse")]
        bool RegisterPlayer(ExamExplotionService.PlayerManagement player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/RegisterPlayer", ReplyAction="http://tempuri.org/IPlayerManager/RegisterPlayerResponse")]
        System.Threading.Tasks.Task<bool> RegisterPlayerAsync(ExamExplotionService.PlayerManagement player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateScore", ReplyAction="http://tempuri.org/IPlayerManager/UpdateScoreResponse")]
        bool UpdateScore(int userId, int newScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateScore", ReplyAction="http://tempuri.org/IPlayerManager/UpdateScoreResponse")]
        System.Threading.Tasks.Task<bool> UpdateScoreAsync(int userId, int newScore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddWin", ReplyAction="http://tempuri.org/IPlayerManager/AddWinResponse")]
        bool AddWin(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddWin", ReplyAction="http://tempuri.org/IPlayerManager/AddWinResponse")]
        System.Threading.Tasks.Task<bool> AddWinAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetWins", ReplyAction="http://tempuri.org/IPlayerManager/GetWinsResponse")]
        int GetWins(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetWins", ReplyAction="http://tempuri.org/IPlayerManager/GetWinsResponse")]
        System.Threading.Tasks.Task<int> GetWinsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPoints", ReplyAction="http://tempuri.org/IPlayerManager/GetPointsResponse")]
        int GetPoints(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPoints", ReplyAction="http://tempuri.org/IPlayerManager/GetPointsResponse")]
        System.Threading.Tasks.Task<int> GetPointsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddGuest", ReplyAction="http://tempuri.org/IPlayerManager/AddGuestResponse")]
        ExamExplotionService.GuestManagement AddGuest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddGuest", ReplyAction="http://tempuri.org/IPlayerManager/AddGuestResponse")]
        System.Threading.Tasks.Task<ExamExplotionService.GuestManagement> AddGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByGamertag", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByGamertagResponse")]
        ExamExplotionService.PlayerManagement GetPlayerByGamertag(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByGamertag", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByGamertagResponse")]
        System.Threading.Tasks.Task<ExamExplotionService.PlayerManagement> GetPlayerByGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetGlobalLeaderboard", ReplyAction="http://tempuri.org/IPlayerManager/GetGlobalLeaderboardResponse")]
        System.Collections.Generic.Dictionary<string, int> GetGlobalLeaderboard();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetGlobalLeaderboard", ReplyAction="http://tempuri.org/IPlayerManager/GetGlobalLeaderboardResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetGlobalLeaderboardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetFriendsLeaderboard", ReplyAction="http://tempuri.org/IPlayerManager/GetFriendsLeaderboardResponse")]
        System.Collections.Generic.Dictionary<string, int> GetFriendsLeaderboard(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetFriendsLeaderboard", ReplyAction="http://tempuri.org/IPlayerManager/GetFriendsLeaderboardResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetFriendsLeaderboardAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IPlayerManagerChannel : ExamExplotionService.IPlayerManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class PlayerManagerClient : System.ServiceModel.ClientBase<ExamExplotionService.IPlayerManager>, ExamExplotionService.IPlayerManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PlayerManagerClient() : 
                base(PlayerManagerClient.GetDefaultBinding(), PlayerManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IPlayerManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(PlayerManagerClient.GetBindingForEndpoint(endpointConfiguration), PlayerManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PlayerManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PlayerManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PlayerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool RegisterPlayer(ExamExplotionService.PlayerManagement player)
        {
            return base.Channel.RegisterPlayer(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterPlayerAsync(ExamExplotionService.PlayerManagement player)
        {
            return base.Channel.RegisterPlayerAsync(player);
        }
        
        public bool UpdateScore(int userId, int newScore)
        {
            return base.Channel.UpdateScore(userId, newScore);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateScoreAsync(int userId, int newScore)
        {
            return base.Channel.UpdateScoreAsync(userId, newScore);
        }
        
        public bool AddWin(int userId)
        {
            return base.Channel.AddWin(userId);
        }
        
        public System.Threading.Tasks.Task<bool> AddWinAsync(int userId)
        {
            return base.Channel.AddWinAsync(userId);
        }
        
        public int GetWins(int playerId)
        {
            return base.Channel.GetWins(playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetWinsAsync(int playerId)
        {
            return base.Channel.GetWinsAsync(playerId);
        }
        
        public int GetPoints(int playerId)
        {
            return base.Channel.GetPoints(playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetPointsAsync(int playerId)
        {
            return base.Channel.GetPointsAsync(playerId);
        }
        
        public ExamExplotionService.GuestManagement AddGuest()
        {
            return base.Channel.AddGuest();
        }
        
        public System.Threading.Tasks.Task<ExamExplotionService.GuestManagement> AddGuestAsync()
        {
            return base.Channel.AddGuestAsync();
        }
        
        public ExamExplotionService.PlayerManagement GetPlayerByGamertag(string gamertag)
        {
            return base.Channel.GetPlayerByGamertag(gamertag);
        }
        
        public System.Threading.Tasks.Task<ExamExplotionService.PlayerManagement> GetPlayerByGamertagAsync(string gamertag)
        {
            return base.Channel.GetPlayerByGamertagAsync(gamertag);
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetGlobalLeaderboard()
        {
            return base.Channel.GetGlobalLeaderboard();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetGlobalLeaderboardAsync()
        {
            return base.Channel.GetGlobalLeaderboardAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetFriendsLeaderboard(int playerId)
        {
            return base.Channel.GetFriendsLeaderboard(playerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetFriendsLeaderboardAsync(int playerId)
        {
            return base.Channel.GetFriendsLeaderboardAsync(playerId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPlayerManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IPlayerManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/PlayerManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PlayerManagerClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IPlayerManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PlayerManagerClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IPlayerManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IPlayerManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IReportManager")]
    public interface IReportManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportPlayer", ReplyAction="http://tempuri.org/IReportManager/ReportPlayerResponse")]
        bool ReportPlayer(int reportedPlayerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/ReportPlayer", ReplyAction="http://tempuri.org/IReportManager/ReportPlayerResponse")]
        System.Threading.Tasks.Task<bool> ReportPlayerAsync(int reportedPlayerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetReportCount", ReplyAction="http://tempuri.org/IReportManager/GetReportCountResponse")]
        int GetReportCount(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportManager/GetReportCount", ReplyAction="http://tempuri.org/IReportManager/GetReportCountResponse")]
        System.Threading.Tasks.Task<int> GetReportCountAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IReportManagerChannel : ExamExplotionService.IReportManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class ReportManagerClient : System.ServiceModel.ClientBase<ExamExplotionService.IReportManager>, ExamExplotionService.IReportManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ReportManagerClient() : 
                base(ReportManagerClient.GetDefaultBinding(), ReportManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IReportManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(ReportManagerClient.GetBindingForEndpoint(endpointConfiguration), ReportManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ReportManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ReportManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ReportManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool ReportPlayer(int reportedPlayerId)
        {
            return base.Channel.ReportPlayer(reportedPlayerId);
        }
        
        public System.Threading.Tasks.Task<bool> ReportPlayerAsync(int reportedPlayerId)
        {
            return base.Channel.ReportPlayerAsync(reportedPlayerId);
        }
        
        public int GetReportCount(int playerId)
        {
            return base.Channel.GetReportCount(playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetReportCountAsync(int playerId)
        {
            return base.Channel.GetReportCountAsync(playerId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IReportManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IReportManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/ReportManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ReportManagerClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IReportManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ReportManagerClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IReportManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IReportManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IAccessoryManager")]
    public interface IAccessoryManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/PurchaseAccessory", ReplyAction="http://tempuri.org/IAccessoryManager/PurchaseAccessoryResponse")]
        bool PurchaseAccessory(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/PurchaseAccessory", ReplyAction="http://tempuri.org/IAccessoryManager/PurchaseAccessoryResponse")]
        System.Threading.Tasks.Task<bool> PurchaseAccessoryAsync(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/SetAccessoryInUse", ReplyAction="http://tempuri.org/IAccessoryManager/SetAccessoryInUseResponse")]
        bool SetAccessoryInUse(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/SetAccessoryInUse", ReplyAction="http://tempuri.org/IAccessoryManager/SetAccessoryInUseResponse")]
        System.Threading.Tasks.Task<bool> SetAccessoryInUseAsync(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/GetPurchasedAccessories", ReplyAction="http://tempuri.org/IAccessoryManager/GetPurchasedAccessoriesResponse")]
        int[] GetPurchasedAccessories(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/GetPurchasedAccessories", ReplyAction="http://tempuri.org/IAccessoryManager/GetPurchasedAccessoriesResponse")]
        System.Threading.Tasks.Task<int[]> GetPurchasedAccessoriesAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/GetAccessoryInUse", ReplyAction="http://tempuri.org/IAccessoryManager/GetAccessoryInUseResponse")]
        ExamExplotionService.AccessoryManagement GetAccessoryInUse(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccessoryManager/GetAccessoryInUse", ReplyAction="http://tempuri.org/IAccessoryManager/GetAccessoryInUseResponse")]
        System.Threading.Tasks.Task<ExamExplotionService.AccessoryManagement> GetAccessoryInUseAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAccessoryManagerChannel : ExamExplotionService.IAccessoryManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AccessoryManagerClient : System.ServiceModel.ClientBase<ExamExplotionService.IAccessoryManager>, ExamExplotionService.IAccessoryManager
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AccessoryManagerClient() : 
                base(AccessoryManagerClient.GetDefaultBinding(), AccessoryManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IAccessoryManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccessoryManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(AccessoryManagerClient.GetBindingForEndpoint(endpointConfiguration), AccessoryManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccessoryManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AccessoryManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccessoryManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AccessoryManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccessoryManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public bool PurchaseAccessory(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement)
        {
            return base.Channel.PurchaseAccessory(purchasedAccessoryManagement);
        }
        
        public System.Threading.Tasks.Task<bool> PurchaseAccessoryAsync(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement)
        {
            return base.Channel.PurchaseAccessoryAsync(purchasedAccessoryManagement);
        }
        
        public bool SetAccessoryInUse(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement)
        {
            return base.Channel.SetAccessoryInUse(purchasedAccessoryManagement);
        }
        
        public System.Threading.Tasks.Task<bool> SetAccessoryInUseAsync(ExamExplotionService.PurchasedAccessoryManagement purchasedAccessoryManagement)
        {
            return base.Channel.SetAccessoryInUseAsync(purchasedAccessoryManagement);
        }
        
        public int[] GetPurchasedAccessories(int playerId)
        {
            return base.Channel.GetPurchasedAccessories(playerId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetPurchasedAccessoriesAsync(int playerId)
        {
            return base.Channel.GetPurchasedAccessoriesAsync(playerId);
        }
        
        public ExamExplotionService.AccessoryManagement GetAccessoryInUse(int playerId)
        {
            return base.Channel.GetAccessoryInUse(playerId);
        }
        
        public System.Threading.Tasks.Task<ExamExplotionService.AccessoryManagement> GetAccessoryInUseAsync(int playerId)
        {
            return base.Channel.GetAccessoryInUseAsync(playerId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAccessoryManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAccessoryManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/AccessoryManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AccessoryManagerClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IAccessoryManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AccessoryManagerClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IAccessoryManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IAccessoryManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IFriendAndBlockList")]
    public interface IFriendAndBlockList
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/AddFriend", ReplyAction="http://tempuri.org/IFriendAndBlockList/AddFriendResponse")]
        int AddFriend(ExamExplotionService.FriendManagement friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/AddFriend", ReplyAction="http://tempuri.org/IFriendAndBlockList/AddFriendResponse")]
        System.Threading.Tasks.Task<int> AddFriendAsync(ExamExplotionService.FriendManagement friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/RemoveFriend", ReplyAction="http://tempuri.org/IFriendAndBlockList/RemoveFriendResponse")]
        bool RemoveFriend(ExamExplotionService.FriendManagement friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/RemoveFriend", ReplyAction="http://tempuri.org/IFriendAndBlockList/RemoveFriendResponse")]
        System.Threading.Tasks.Task<bool> RemoveFriendAsync(ExamExplotionService.FriendManagement friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/GetFriendsGamertags", ReplyAction="http://tempuri.org/IFriendAndBlockList/GetFriendsGamertagsResponse")]
        System.Collections.Generic.Dictionary<int, string> GetFriendsGamertags(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/GetFriendsGamertags", ReplyAction="http://tempuri.org/IFriendAndBlockList/GetFriendsGamertagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetFriendsGamertagsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/AddBlock", ReplyAction="http://tempuri.org/IFriendAndBlockList/AddBlockResponse")]
        int AddBlock(ExamExplotionService.BlockListManagement blockList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/AddBlock", ReplyAction="http://tempuri.org/IFriendAndBlockList/AddBlockResponse")]
        System.Threading.Tasks.Task<int> AddBlockAsync(ExamExplotionService.BlockListManagement blockList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/RemoveBlock", ReplyAction="http://tempuri.org/IFriendAndBlockList/RemoveBlockResponse")]
        bool RemoveBlock(ExamExplotionService.BlockListManagement blockList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/RemoveBlock", ReplyAction="http://tempuri.org/IFriendAndBlockList/RemoveBlockResponse")]
        System.Threading.Tasks.Task<bool> RemoveBlockAsync(ExamExplotionService.BlockListManagement blockList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/GetBlockedGamertags", ReplyAction="http://tempuri.org/IFriendAndBlockList/GetBlockedGamertagsResponse")]
        System.Collections.Generic.Dictionary<int, string> GetBlockedGamertags(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendAndBlockList/GetBlockedGamertags", ReplyAction="http://tempuri.org/IFriendAndBlockList/GetBlockedGamertagsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetBlockedGamertagsAsync(int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IFriendAndBlockListChannel : ExamExplotionService.IFriendAndBlockList, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class FriendAndBlockListClient : System.ServiceModel.ClientBase<ExamExplotionService.IFriendAndBlockList>, ExamExplotionService.IFriendAndBlockList
    {
        
        /// <summary>
        /// Implemente este método parcial para configurar el punto de conexión de servicio.
        /// </summary>
        /// <param name="serviceEndpoint">El punto de conexión para configurar</param>
        /// <param name="clientCredentials">Credenciales de cliente</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FriendAndBlockListClient() : 
                base(FriendAndBlockListClient.GetDefaultBinding(), FriendAndBlockListClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IFriendAndBlockList.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FriendAndBlockListClient(EndpointConfiguration endpointConfiguration) : 
                base(FriendAndBlockListClient.GetBindingForEndpoint(endpointConfiguration), FriendAndBlockListClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FriendAndBlockListClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FriendAndBlockListClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FriendAndBlockListClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FriendAndBlockListClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FriendAndBlockListClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public int AddFriend(ExamExplotionService.FriendManagement friend)
        {
            return base.Channel.AddFriend(friend);
        }
        
        public System.Threading.Tasks.Task<int> AddFriendAsync(ExamExplotionService.FriendManagement friend)
        {
            return base.Channel.AddFriendAsync(friend);
        }
        
        public bool RemoveFriend(ExamExplotionService.FriendManagement friend)
        {
            return base.Channel.RemoveFriend(friend);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFriendAsync(ExamExplotionService.FriendManagement friend)
        {
            return base.Channel.RemoveFriendAsync(friend);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetFriendsGamertags(int playerId)
        {
            return base.Channel.GetFriendsGamertags(playerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetFriendsGamertagsAsync(int playerId)
        {
            return base.Channel.GetFriendsGamertagsAsync(playerId);
        }
        
        public int AddBlock(ExamExplotionService.BlockListManagement blockList)
        {
            return base.Channel.AddBlock(blockList);
        }
        
        public System.Threading.Tasks.Task<int> AddBlockAsync(ExamExplotionService.BlockListManagement blockList)
        {
            return base.Channel.AddBlockAsync(blockList);
        }
        
        public bool RemoveBlock(ExamExplotionService.BlockListManagement blockList)
        {
            return base.Channel.RemoveBlock(blockList);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveBlockAsync(ExamExplotionService.BlockListManagement blockList)
        {
            return base.Channel.RemoveBlockAsync(blockList);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetBlockedGamertags(int playerId)
        {
            return base.Channel.GetBlockedGamertags(playerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetBlockedGamertagsAsync(int playerId)
        {
            return base.Channel.GetBlockedGamertagsAsync(playerId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IFriendAndBlockList))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IFriendAndBlockList))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/FriendAndBlockListManager");
            }
            throw new System.InvalidOperationException(string.Format("No se pudo encontrar un punto de conexión con el nombre \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return FriendAndBlockListClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IFriendAndBlockList);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return FriendAndBlockListClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IFriendAndBlockList);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IFriendAndBlockList,
        }
    }
    
    public class ReceiveMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReceiveMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string gamertag
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string message
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class RepaintReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public RepaintReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, bool> playerStatus
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, bool>)(this.results[0]));
            }
        }
    }
    
    public class StartGameReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public StartGameReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, bool> lobbyPlayers
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, bool>)(this.results[0]));
            }
        }
    }
    
    public class UpdateCurrentTurnReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public UpdateCurrentTurnReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string gamertag
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class RecivePlayerAndGameDeckReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public RecivePlayerAndGameDeckReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Stack<ExamExplotionService.CardManagement>)(this.results[0]));
            }
        }
        
        public ExamExplotionService.CardManagement[] playerDeck
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ExamExplotionService.CardManagement[])(this.results[1]));
            }
        }
    }
    
    public class RemoveCardFromStackReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public RemoveCardFromStackReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public bool isTopCard
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    public class PrintCardOnBoardReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public PrintCardOnBoardReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string path
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class ReceiveGameDeckReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReceiveGameDeckReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Stack<ExamExplotionService.CardManagement>)(this.results[0]));
            }
        }
    }
    
    public class NotifyCardRequestedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public NotifyCardRequestedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string gameCode
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string playerRequesting
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class NotifyCardReceivedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public NotifyCardReceivedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public ExamExplotionService.CardManagement card
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ExamExplotionService.CardManagement)(this.results[0]));
            }
        }
    }
    
    public class ReciveNotificationReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReciveNotificationReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string message
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public class EndTheGameReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public EndTheGameReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string gameCode
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string winnerGamertag
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class ReciveAndAddExamBombReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReciveAndAddExamBombReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public int index
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    public partial class GameManagerClient : GameManagerClientBase
    {
        
        public GameManagerClient(EndpointConfiguration endpointConfiguration) : 
                this(new GameManagerClientCallback(), endpointConfiguration)
        {
        }
        
        private GameManagerClient(GameManagerClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public GameManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new GameManagerClientCallback(), binding, remoteAddress)
        {
        }
        
        private GameManagerClient(GameManagerClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public GameManagerClient() : 
                this(new GameManagerClientCallback())
        {
        }
        
        private GameManagerClient(GameManagerClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<UpdateCurrentTurnReceivedEventArgs> UpdateCurrentTurnReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SyncTimerReceived;
        
        public event System.EventHandler<RecivePlayerAndGameDeckReceivedEventArgs> RecivePlayerAndGameDeckReceived;
        
        public event System.EventHandler<RemoveCardFromStackReceivedEventArgs> RemoveCardFromStackReceived;
        
        public event System.EventHandler<PrintCardOnBoardReceivedEventArgs> PrintCardOnBoardReceived;
        
        public event System.EventHandler<ReceiveGameDeckReceivedEventArgs> ReceiveGameDeckReceived;
        
        public event System.EventHandler<NotifyCardRequestedReceivedEventArgs> NotifyCardRequestedReceived;
        
        public event System.EventHandler<NotifyCardReceivedReceivedEventArgs> NotifyCardReceivedReceived;
        
        public event System.EventHandler<ReciveNotificationReceivedEventArgs> ReciveNotificationReceived;
        
        public event System.EventHandler<EndTheGameReceivedEventArgs> EndTheGameReceived;
        
        public event System.EventHandler<ReciveAndAddExamBombReceivedEventArgs> ReciveAndAddExamBombReceived;
        
        private void OnUpdateCurrentTurnReceived(object state)
        {
            if ((this.UpdateCurrentTurnReceived != null))
            {
                object[] results = ((object[])(state));
                this.UpdateCurrentTurnReceived(this, new UpdateCurrentTurnReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnSyncTimerReceived(object state)
        {
            if ((this.SyncTimerReceived != null))
            {
                object[] results = ((object[])(state));
                this.SyncTimerReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnRecivePlayerAndGameDeckReceived(object state)
        {
            if ((this.RecivePlayerAndGameDeckReceived != null))
            {
                object[] results = ((object[])(state));
                this.RecivePlayerAndGameDeckReceived(this, new RecivePlayerAndGameDeckReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRemoveCardFromStackReceived(object state)
        {
            if ((this.RemoveCardFromStackReceived != null))
            {
                object[] results = ((object[])(state));
                this.RemoveCardFromStackReceived(this, new RemoveCardFromStackReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnPrintCardOnBoardReceived(object state)
        {
            if ((this.PrintCardOnBoardReceived != null))
            {
                object[] results = ((object[])(state));
                this.PrintCardOnBoardReceived(this, new PrintCardOnBoardReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReceiveGameDeckReceived(object state)
        {
            if ((this.ReceiveGameDeckReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReceiveGameDeckReceived(this, new ReceiveGameDeckReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyCardRequestedReceived(object state)
        {
            if ((this.NotifyCardRequestedReceived != null))
            {
                object[] results = ((object[])(state));
                this.NotifyCardRequestedReceived(this, new NotifyCardRequestedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnNotifyCardReceivedReceived(object state)
        {
            if ((this.NotifyCardReceivedReceived != null))
            {
                object[] results = ((object[])(state));
                this.NotifyCardReceivedReceived(this, new NotifyCardReceivedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReciveNotificationReceived(object state)
        {
            if ((this.ReciveNotificationReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReciveNotificationReceived(this, new ReciveNotificationReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnEndTheGameReceived(object state)
        {
            if ((this.EndTheGameReceived != null))
            {
                object[] results = ((object[])(state));
                this.EndTheGameReceived(this, new EndTheGameReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReciveAndAddExamBombReceived(object state)
        {
            if ((this.ReciveAndAddExamBombReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReciveAndAddExamBombReceived(this, new ReciveAndAddExamBombReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class GameManagerClientCallback : object, IGameManagerCallback
        {
            
            private GameManagerClient proxy;
            
            public void Initialize(GameManagerClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void UpdateCurrentTurn(string gamertag)
            {
                this.proxy.OnUpdateCurrentTurnReceived(new object[] {
                            gamertag});
            }
            
            public void SyncTimer()
            {
                this.proxy.OnSyncTimerReceived(new object[0]);
            }
            
            public void RecivePlayerAndGameDeck(System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck, ExamExplotionService.CardManagement[] playerDeck)
            {
                this.proxy.OnRecivePlayerAndGameDeckReceived(new object[] {
                            gameDeck,
                            playerDeck});
            }
            
            public void RemoveCardFromStack(bool isTopCard)
            {
                this.proxy.OnRemoveCardFromStackReceived(new object[] {
                            isTopCard});
            }
            
            public void PrintCardOnBoard(string path)
            {
                this.proxy.OnPrintCardOnBoardReceived(new object[] {
                            path});
            }
            
            public void ReceiveGameDeck(System.Collections.Generic.Stack<ExamExplotionService.CardManagement> gameDeck)
            {
                this.proxy.OnReceiveGameDeckReceived(new object[] {
                            gameDeck});
            }
            
            public void NotifyCardRequested(string gameCode, string playerRequesting)
            {
                this.proxy.OnNotifyCardRequestedReceived(new object[] {
                            gameCode,
                            playerRequesting});
            }
            
            public void NotifyCardReceived(ExamExplotionService.CardManagement card)
            {
                this.proxy.OnNotifyCardReceivedReceived(new object[] {
                            card});
            }
            
            public void ReciveNotification(string message)
            {
                this.proxy.OnReciveNotificationReceived(new object[] {
                            message});
            }
            
            public void EndTheGame(string gameCode, string winnerGamertag)
            {
                this.proxy.OnEndTheGameReceived(new object[] {
                            gameCode,
                            winnerGamertag});
            }
            
            public void ReciveAndAddExamBomb(int index)
            {
                this.proxy.OnReciveAndAddExamBombReceived(new object[] {
                            index});
            }
        }
    }
}
