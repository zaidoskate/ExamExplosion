//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamExplotionService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameM", Namespace="http://schemas.datacontract.org/2004/07/ServerServices")]
    public partial class GameM : object
    {
        
        private int GameIdField;
        
        private string GameStatusField;
        
        private int HostPlayerIdField;
        
        private string InvitationCodeField;
        
        private int LivesField;
        
        private int NumberPlayersField;
        
        private int TimePerTurnField;
        
        private int WinnerPlayerIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GameId
        {
            get
            {
                return this.GameIdField;
            }
            set
            {
                this.GameIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GameStatus
        {
            get
            {
                return this.GameStatusField;
            }
            set
            {
                this.GameStatusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int HostPlayerId
        {
            get
            {
                return this.HostPlayerIdField;
            }
            set
            {
                this.HostPlayerIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InvitationCode
        {
            get
            {
                return this.InvitationCodeField;
            }
            set
            {
                this.InvitationCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Lives
        {
            get
            {
                return this.LivesField;
            }
            set
            {
                this.LivesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberPlayers
        {
            get
            {
                return this.NumberPlayersField;
            }
            set
            {
                this.NumberPlayersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimePerTurn
        {
            get
            {
                return this.TimePerTurnField;
            }
            set
            {
                this.TimePerTurnField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WinnerPlayerId
        {
            get
            {
                return this.WinnerPlayerIdField;
            }
            set
            {
                this.WinnerPlayerIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountM", Namespace="http://schemas.datacontract.org/2004/07/ServerService")]
    public partial class AccountM : object
    {
        
        private string EmailField;
        
        private string GamertagField;
        
        private string LastnameField;
        
        private string NameField;
        
        private string PasswordField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email
        {
            get
            {
                return this.EmailField;
            }
            set
            {
                this.EmailField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gamertag
        {
            get
            {
                return this.GamertagField;
            }
            set
            {
                this.GamertagField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lastname
        {
            get
            {
                return this.LastnameField;
            }
            set
            {
                this.LastnameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password
        {
            get
            {
                return this.PasswordField;
            }
            set
            {
                this.PasswordField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.ILobbyManager", CallbackContract=typeof(ExamExplotionService.ILobbyManagerCallback))]
    public interface ILobbyManager
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string gameCode, string gamertag, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/Connect")]
        System.Threading.Tasks.Task ConnectAsync(string user, string lobbyCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/Disconnect", ReplyAction="http://tempuri.org/ILobbyManager/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(string lobbyCode, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/CreateLobby", ReplyAction="http://tempuri.org/ILobbyManager/CreateLobbyResponse")]
        System.Threading.Tasks.Task<string> CreateLobbyAsync(ExamExplotionService.GameM gameReceived);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/JoinLobby", ReplyAction="http://tempuri.org/ILobbyManager/JoinLobbyResponse")]
        System.Threading.Tasks.Task<bool> JoinLobbyAsync(string code, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/UpdatePlayerStatus")]
        System.Threading.Tasks.Task UpdatePlayerStatusAsync(string code, string gamertag, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyManager/LeaveLobby", ReplyAction="http://tempuri.org/ILobbyManager/LeaveLobbyResponse")]
        System.Threading.Tasks.Task LeaveLobbyAsync(string code, string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ILobbyManagerCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/ReceiveMessage")]
        void ReceiveMessage(string gamertag, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyManager/Repaint")]
        void Repaint(System.Collections.Generic.Dictionary<string, bool> playerStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ILobbyManagerChannel : ExamExplotionService.ILobbyManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class LobbyManagerClientBase : System.ServiceModel.DuplexClientBase<ExamExplotionService.ILobbyManager>, ExamExplotionService.ILobbyManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, LobbyManagerClientBase.GetDefaultBinding(), LobbyManagerClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ILobbyManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), LobbyManagerClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, LobbyManagerClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LobbyManagerClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string gameCode, string gamertag, string message)
        {
            return base.Channel.SendMessageAsync(gameCode, gamertag, message);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(string user, string lobbyCode)
        {
            return base.Channel.ConnectAsync(user, lobbyCode);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string lobbyCode, string gamertag)
        {
            return base.Channel.DisconnectAsync(lobbyCode, gamertag);
        }
        
        public System.Threading.Tasks.Task<string> CreateLobbyAsync(ExamExplotionService.GameM gameReceived)
        {
            return base.Channel.CreateLobbyAsync(gameReceived);
        }
        
        public System.Threading.Tasks.Task<bool> JoinLobbyAsync(string code, string gamertag)
        {
            return base.Channel.JoinLobbyAsync(code, gamertag);
        }
        
        public System.Threading.Tasks.Task UpdatePlayerStatusAsync(string code, string gamertag, bool isReady)
        {
            return base.Channel.UpdatePlayerStatusAsync(code, gamertag, isReady);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(string code, string gamertag)
        {
            return base.Channel.LeaveLobbyAsync(code, gamertag);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ILobbyManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ILobbyManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/LobbyManager");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return LobbyManagerClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ILobbyManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return LobbyManagerClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ILobbyManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ILobbyManager,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ExamExplotionService.IAuthenticationManager")]
    public interface IAuthenticationManager
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/Login", ReplyAction="http://tempuri.org/IAuthenticationManager/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(ExamExplotionService.AccountM account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/GetAccountIdFromCurrentSession", ReplyAction="http://tempuri.org/IAuthenticationManager/GetAccountIdFromCurrentSessionResponse")]
        System.Threading.Tasks.Task<int> GetAccountIdFromCurrentSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/AddAccount", ReplyAction="http://tempuri.org/IAuthenticationManager/AddAccountResponse")]
        System.Threading.Tasks.Task<bool> AddAccountAsync(ExamExplotionService.AccountM account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertag", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingGamertagResponse")]
        System.Threading.Tasks.Task<bool> VerifyExistingGamertagAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/VerifyExistingEmail", ReplyAction="http://tempuri.org/IAuthenticationManager/VerifyExistingEmailResponse")]
        System.Threading.Tasks.Task<bool> VerifyExistingEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationManager/UpdatePassword", ReplyAction="http://tempuri.org/IAuthenticationManager/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<bool> UpdatePasswordAsync(ExamExplotionService.AccountM account);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IAuthenticationManagerChannel : ExamExplotionService.IAuthenticationManager, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AuthenticationManagerClient : System.ServiceModel.ClientBase<ExamExplotionService.IAuthenticationManager>, ExamExplotionService.IAuthenticationManager
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthenticationManagerClient() : 
                base(AuthenticationManagerClient.GetDefaultBinding(), AuthenticationManagerClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IAuthenticationManager.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), AuthenticationManagerClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthenticationManagerClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthenticationManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(ExamExplotionService.AccountM account)
        {
            return base.Channel.LoginAsync(account);
        }
        
        public System.Threading.Tasks.Task<int> GetAccountIdFromCurrentSessionAsync()
        {
            return base.Channel.GetAccountIdFromCurrentSessionAsync();
        }
        
        public System.Threading.Tasks.Task<bool> AddAccountAsync(ExamExplotionService.AccountM account)
        {
            return base.Channel.AddAccountAsync(account);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyExistingGamertagAsync(string gamertag)
        {
            return base.Channel.VerifyExistingGamertagAsync(gamertag);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyExistingEmailAsync(string email)
        {
            return base.Channel.VerifyExistingEmailAsync(email);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePasswordAsync(ExamExplotionService.AccountM account)
        {
            return base.Channel.UpdatePasswordAsync(account);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAuthenticationManager))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                result.ReliableSession.Enabled = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IAuthenticationManager))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8081/AuthenticationManager");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuthenticationManagerClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IAuthenticationManager);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuthenticationManagerClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IAuthenticationManager);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_IAuthenticationManager,
        }
    }
    
    public class ReceiveMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public ReceiveMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string gamertag
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string message
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    public class RepaintReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public RepaintReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, bool> playerStatus
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, bool>)(this.results[0]));
            }
        }
    }
    
    public partial class LobbyManagerClient : LobbyManagerClientBase
    {
        
        public LobbyManagerClient(EndpointConfiguration endpointConfiguration) : 
                this(new LobbyManagerClientCallback(), endpointConfiguration)
        {
        }
        
        private LobbyManagerClient(LobbyManagerClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public LobbyManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new LobbyManagerClientCallback(), binding, remoteAddress)
        {
        }
        
        private LobbyManagerClient(LobbyManagerClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public LobbyManagerClient() : 
                this(new LobbyManagerClientCallback())
        {
        }
        
        private LobbyManagerClient(LobbyManagerClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<ReceiveMessageReceivedEventArgs> ReceiveMessageReceived;
        
        public event System.EventHandler<RepaintReceivedEventArgs> RepaintReceived;
        
        private void OnReceiveMessageReceived(object state)
        {
            if ((this.ReceiveMessageReceived != null))
            {
                object[] results = ((object[])(state));
                this.ReceiveMessageReceived(this, new ReceiveMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnRepaintReceived(object state)
        {
            if ((this.RepaintReceived != null))
            {
                object[] results = ((object[])(state));
                this.RepaintReceived(this, new RepaintReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class LobbyManagerClientCallback : object, ILobbyManagerCallback
        {
            
            private LobbyManagerClient proxy;
            
            public void Initialize(LobbyManagerClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void ReceiveMessage(string gamertag, string message)
            {
                this.proxy.OnReceiveMessageReceived(new object[] {
                            gamertag,
                            message});
            }
            
            public void Repaint(System.Collections.Generic.Dictionary<string, bool> playerStatus)
            {
                this.proxy.OnRepaintReceived(new object[] {
                            playerStatus});
            }
        }
    }
}
